# -*- coding: utf-8 -*-
"""spam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siK5o2AmHvzawdhM34Avnh6jUIhAZqiP
"""

import numpy as np #for performing mathematical operations on numerical array
import pandas as pd #for uplpoading dataset in a dataframe module to perform ML algo(s)
import nltk #Natural Language Toolkit is open-source module
import re #regular expression for pattern matching
from nltk.corpus import stopwords #importing stopword modules for removing common words
from nltk.stem.porter import PorterStemmer #importing Module for Stemming purposes
from sklearn.model_selection import train_test_split #training_testing spliting
from sklearn.feature_extraction.text import TfidfVectorizer #TF-IDF vectorizer module
from sklearn.linear_model import LogisticRegression #Logistic Regression Model
from sklearn.naive_bayes import MultinomialNB #Multinomial Regression Model
from sklearn.metrics import confusion_matrix #for printing the confusion matrix
from sklearn.metrics import accuracy_score #for printing the accuracy score
from sklearn.preprocessing import LabelEncoder #for label encoding the data
nltk.download('stopwords') #downloading stopwords for removing commonly used words from data
from sklearn.model_selection import cross_val_score#calculation cross validation
from sklearn.metrics import classification_report#for f1 score,recall
import matplotlib.pyplot as plt

from google.colab import files
files.upload()

"""Upload the csv file into the DataFrame"""

df=pd.read_csv('spam.csv',encoding="ISO-8859-1")
df.head(10)

"""Take the feature set into x which is called independent variable."""

X=df.iloc[:,1]
X[:10]

"""Take the output into y variable which is called dependent variable."""

Y=df.iloc[:,0]
Y[:10]

"""Encoding"""

df['v11']= np.where(df['v1']=='ham', 0,1) #dependant variable
Y=df['v11']
Y

"""Removal of stopwords and performing stemming"""

corpus=[]
stemmer=PorterStemmer()
for i in range(0, len(X)):
    sentence = re.sub('[^a-zA-Z]', ' ', X[i])
    sentence = sentence.lower()
    sentence = sentence.split()
    sentence = [stemmer.stem(word) for word in sentence if not word in stopwords.words('english')]
    sentence = ' '.join(sentence)
    corpus.append(sentence)

"""TF-IDF vectorization"""

cv = TfidfVectorizer(max_features=5000)
X = cv.fit_transform(corpus)

color_wheel = {1: "#0392cf", 2: "#7bc043"}
colors = df["v11"].map(lambda x: color_wheel.get(x + 1))
print(df.v11.value_counts())
p=df.v11.value_counts().plot(kind="bar")

"""Oversampling to balanced the dataset"""

from imblearn.over_sampling import RandomOverSampler

ros = RandomOverSampler(random_state=42)

x_ros, y_ros = ros.fit_resample(X, Y)

print('Original dataset shape', df.v11.value_counts())
print('Resample dataset shape', np.unique(y_ros, return_counts=True))

X=x_ros
Y=y_ros

import matplotlib.pyplot as plt
color_wheel = {1: "#0392cf", 2: "#7bc043"}
colors = Y.map(lambda x: color_wheel.get(x + 1))
print(Y.value_counts())
p=Y.value_counts().plot(kind="bar")

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20)

"""LogisticRegression Model."""

Logistic_Model= LogisticRegression().fit(X_train,Y_train)
Y_pred_logi=Logistic_Model.predict(X_test)
scores=cross_val_score(Logistic_Model,X,Y,cv=10)
print("Accuracy of Logistigtic Regereesion is :",scores.mean()*100)
print(classification_report(Y_test,Y_pred_logi,digits=2))

"""Naive Bays Model"""

Naive_Model= MultinomialNB().fit(X_train,Y_train)
Y_pred_naive=Naive_Model.predict(X_test)
scores=cross_val_score(Naive_Model,X,Y,cv=10)
print("Accuracy of Naive bays is :",scores.mean()*100)
print(classification_report(Y_test,Y_pred_naive,digits=2))

"""SVM Model."""

from sklearn import svm
clf=svm.LinearSVC()
clf.fit(X_train,Y_train)
ypred=clf.predict(X_test)
scores=cross_val_score(clf,X,Y,cv=10)
print("Accuracy of SVM is :",scores.mean()*100)
print(classification_report(Y_test,ypred,digits=2))

"""Take input from user."""

test1=input("Enter Your String :")

s1 = re.sub('[^a-zA-Z]', ' ', test1)
s1 = s1.lower()
s1 = s1.split()
s1 = [stemmer.stem(word) for word in s1 if not word in stopwords.words('english')]
x1=cv.transform(s1)

x1=cv.transform(s1)

tx=clf.predict(x1)

o1=np.sum(tx)
if o1 == 0:
  print("ham")
else:
  print("spam")